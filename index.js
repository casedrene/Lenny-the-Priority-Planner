'use strict'

// Imports dependencies and set up http server
const
  request = require('request'),
  express = require('express'),
  body_parser = require('body-parser'),
  //create express http server
  app = express().use(body_parser.json())

//Token generated by Facebook
const PAGE_ACCESS_TOKEN = "XXXXX"

//Set server port
app.listen(process.env.PORT || 1337, () => console.log('webhook is listening'))

app.get('/setup',function(req,res){
    setupGetStartedButton(res)
})

//Accept POST requests at /webhook endpoint
app.post('/webhook', (req, res) => {

  //Parse the request body from the POST
  let body = req.body

  //Check the webhook event is from a Page subscription
  if (body.object === 'page') {

    //Iterate over each entry
    body.entry.forEach(function(entry) {

      //Get the webhook event
      let webhook_event = entry.messaging[0]
      console.log(webhook_event)

      //Get sender PSID
      let sender_psid = webhook_event.sender.id
      console.log('Sender PSID: ' + sender_psid)

      //Check if the event is a message or postback
      //Pass the event to the appropriate handler function
      if (webhook_event.message) {
        handleMessage(sender_psid, webhook_event.message)

      } else if (webhook_event.postback) {
        handlePostback(sender_psid, webhook_event.postback)

      }

    })

    //Return a '200 OK' response to all events
    res.status(200).send('EVENT_RECEIVED')

  } else {
    //Return a '404 Not Found' if event is not from a page subscription
    res.sendStatus(404)
  }

})

//Accept GET requests at the /webhook endpoint
app.get('/webhook', (req, res) => {

  // UPDATE YOUR VERIFY TOKEN
  const VERIFY_TOKEN = "XXXXX"

  //Parse params from the webhook verification request
  let mode = req.query['hub.mode']
  let token = req.query['hub.verify_token']
  let challenge = req.query['hub.challenge']

  //Check if a token and mode were sent
  if (mode && token) {

    //Check the mode and token sent are correct
    if (mode === 'subscribe' && token === VERIFY_TOKEN) {

      //Respond with 200 OK and challenge token from the request
      console.log('WEBHOOK_VERIFIED')
      res.status(200).send(challenge)

    } else {
      //Respond with '403 Forbidden' if verify tokens do not match
      res.sendStatus(403)
    }
  }
})

function setupGetStartedButton(res){
       let request_body = {
         "get_started":{
           "payload":"GET_STARTED"
         }
        }

        //Start the request
        request({
            "uri": "https://graph.facebook.com/v2.6/me/messenger_profile?access_token=" + PAGE_ACCESS_TOKEN,
            "method": 'POST',
            "headers": {'Content-Type': 'application/json'},
            "json": request_body
        }, (err, res, body) => {
          if (!err) {
            console.log('message sent!')
          } else {
            console.error("Unable to send message:" + err)
          }
        })
    }

let taskTitle
let importance
let urgency
let userDataArray = []

//Handle message data from user
function handleMessage(sender_psid, received_message) {

  let response
  let messageData = received_message.text

  //User input is analysed and approprite action is taken
  if (messageData) {
    switch (messageData){
      //When user decides to add new task, bot asks for its title
      case 'Add Task':
        response = {
          "text": `Please enter the title of your task.`
        }
        typing(sender_psid)
        callSendAPI(sender_psid, response)
        break

      //User picks importance of the task and bot asks about urgency
      case 'Important':
      case 'Not Important':
        importance = messageData
        response = {
          "text": `How urgent is your task?`,

          "quick_replies":[
            {
              "content_type":"text",
              "title":"Urgent",
              "payload":"URGENT"
            },
            {
              "content_type":"text",
              "title":"It Could Wait",
              "payload":"NOT_URGENT"
            }
          ]
        }
        callSendAPI(sender_psid, response)
        break

      //User decides how urgent the task is
      //Bot asks if user wants to add another task or finish
      case 'Urgent':
      case 'It Could Wait':
        urgency = messageData
        response = {

            "text": `Thanks!`,
            "quick_replies":[
              {
                "content_type":"text",
                "title":"Add Task",
                "payload":"ADD_TASK"
              },
              {
                "content_type":"text",
                "title":"Done",
                "payload":"DONE"
              }
            ]
        }
        callSendAPI(sender_psid, response)
        saveMessage(sender_psid, taskTitle, importance, urgency)
        break

      //User indicates that no new tasks will be added and output can be evaluated
      case 'Done':
        typing(sender_psid)
        evaluateResult(sender_psid, userDataArray)
        typing(sender_psid)
        setTimeout(() => farewell(sender_psid), 2000)
        break

      //User indicates that he wants to start a new list
      //User data is cleared
      case 'Start Over':

        userDataArray.length = 0
        response = {
          "text": `What is the title of your task?`
        }
        typing(sender_psid)
        callSendAPI(sender_psid, response)
        break

      //Default case catches all input that doesn't match any of the previous options
      //and takes that as the title of the task
      default:
        taskTitle = messageData
        response = {

          "text": `How important is your task?`,

          "quick_replies":[
            {
              "content_type":"text",
              "title":"Important",
              "payload":"IMPORTANT"
            },
            {
              "content_type":"text",
              "title":"Not Important",
              "payload":"NOT_IMPORTANT"
            }
          ]
        }
        callSendAPI(sender_psid, response)
    }
    }

}

//Sending API calls
function callSendAPI(sender_psid, response) {
  // Construct the message body
  let request_body = {
    "messaging_type": "RESPONSE",
    "recipient": {
      "id": sender_psid
    },
    "message": response

  }

  // Send the HTTP request to the Messenger Platform
  request({
    "uri": "https://graph.facebook.com/v2.6/me/messages",
    "qs": { "access_token": PAGE_ACCESS_TOKEN },
    "method": "POST",
    "json": request_body
  }, (err, res, body) => {
    if (!err) {
      console.log('message sent!')
    } else {
      console.error("Unable to send message:" + err)
    }
  })
}

// Handles messaging_postbacks events
function handlePostback(sender_psid, received_postback) {
  let response

  //Get Started button sends this handlePostback
  //User will see the Get Started button only during the first interaction with the bot
  //Response contains generic message template with a postback button and a url button
  if (received_postback.payload === 'GET_STARTED') {
    response = {
    "attachment":{
      "type":"template",
      "payload":{
        "template_type":"generic",
        "elements":[
           {
            "title":"Welcome!",
            "image_url":"http://www.prudhoebusiness.co.uk/wp-content/uploads/2015/05/free-office-wallpaper-26001-26685-hd-wallpapers.jpg",
            "subtitle":"Click below to start adding tasks.",

            "buttons":[
              {
                "type":"postback",
                "title":"Add task",
                "payload":"ADD_TASK"
              },{
                "type":"web_url",
                "url":"https://www.linkedin.com/pulse/maximize-your-productivity-chatbot-lenny-priority-planner-kucerova/?trackingId=H1eCLGqPgiPae37KjPOKkA%3D%3D",
                "title":"About Me"
              }
            ]
          }
        ]
      }
    }
  }
  }

  //This is a postback button in the generic template and it triggers the same
  //action as Add Task quick reply. However, quick replies are handled as messages
  //and dealt with earlier
  if (received_postback.payload === 'ADD_TASK') {
    response = {
    "text":'Please enter the title of your task.',
    }
  }
  callSendAPI(sender_psid, response)
}

//After user enters task title, importance and urgency, message is saved
//and pushed to an array
function saveMessage(sender_psid, taskTitle, importance, urgency) {
  let userMessageArray = []
  userMessageArray.push(taskTitle, importance, urgency)

  userDataArray.push(userMessageArray)
}


let currentTask
//Sorts user input into four quadrants
function evaluateResult(sender_psid, userDataArray) {
  //Iterating over an array with user data and handing the title of the current
  //task over to correct function where it can be saved in another array,
  //ready to be printed out at the end
  for(var i=0; i < userDataArray.length; i++){
    currentTask = userDataArray[i]
    switch (currentTask[1]){
      case 'Important':
        important(sender_psid, currentTask)
        break

      case 'Not Important':
        notImportant(sender_psid, currentTask)
        break

      default:
        break
    }
  }

  //Once the sorting is done, each quadrant is displayed as a separate message
  //with an array of tasks that belong to that quadrants
  //If an array with tasks is empty, message for relevant quadrant is not displayed
  if (doNowArray.length !== 0){
  doNowText(sender_psid, doNowArray)
  }
  if (doLaterArray.length !== 0){
  doLaterText(sender_psid, doLaterArray)
  }
  if (delegateArray.length !== 0){
  delegateText(sender_psid, delegateArray)
  }
  if (skipArray.length !== 0){
  skipText(sender_psid, skipArray)
  }
}

//If user selected importance, urgency is checked
function important(sender_psid, currentTask){
let response
  switch (currentTask[2]){
    case 'Urgent':
      doNow(sender_psid, currentTask)
      break

    case 'It Could Wait':
      doLater(sender_psid, currentTask)
      break

    default:
      break
  }
}

function notImportant(sender_psid, currentTask){
  let response

    switch (currentTask[2]){
      case 'Urgent':
        delegate(sender_psid, currentTask)
        break

      case 'It Could Wait':
        skip(sender_psid, currentTask)
        break

      default:
        break
    }
}

//Tasks which are important and urgent are saved in an array here
let doNowArray = []
function doNow(sender_psid, currentTask){
  let formatTask = "\n" + currentTask[0]
  doNowArray.push(formatTask)
}

//Function for displaying tasks in the first quadrant
function doNowText(sender_psid, doNowArray){
let response
  response = {
    "text": `These tasks are important and urgent. You should get them done as soon as possible:${doNowArray}`
  }
  callSendAPI(sender_psid, response)
  doNowArray.length = 0
}

//Tasks which are important and not urgent are saved in an array here
let doLaterArray = []
function doLater(sender_psid, currentTask){
  let formatTask = "\n" + currentTask[0]
  doLaterArray.push(formatTask)
}

//Function for displaying tasks in the second quadrant
function doLaterText(sender_psid, doLaterArray){
let response
  response = {
    "text": `These tasks are important and not urgent. You can do them later:${doLaterArray}`
  }
  callSendAPI(sender_psid, response)
  doLaterArray.length = 0
}

//Tasks which are not important and urgent are saved in an array here
let delegateArray = []
function delegate(sender_psid, currentTask){
  let formatTask = "\n" + currentTask[0]
  delegateArray.push(formatTask)
}

//Function for displaying tasks in the third quadrant
function delegateText(sender_psid, delegateArray){
let response
  response = {
    "text": `These tasks are not important and urgent. You can delegate them:${delegateArray}`
  }
  callSendAPI(sender_psid, response)
  delegateArray.length = 0
}

//Tasks which are not important and not urgent are saved in an array here
let skipArray = []
function skip(sender_psid, currentTask){
  let formatTask = "\n" + currentTask[0]
  skipArray.push(formatTask)
}

//Function for displaying tasks in the fourth quadrant
function skipText(sender_psid, skipArray){
let response
  response = {
    "text": `These tasks are not important and not urgent. You may not want to do them at all:${skipArray}`
  }
  callSendAPI(sender_psid, response)
  skipArray.length = 0
}

//Last message displayed inthe output with a quick reply to sttart over
function farewell(sender_psid) {
  let response
    response = {
      "text": `Did you forget something? Just type the title of your next task and it will be added to the list.\nCome back and prioritize more tasks any time! :)`,
      "quick_replies":[
        {
          "content_type":"text",
          "title":"Start Over",
          "payload":"START_OVER"
        }
      ]
    }
    callSendAPI(sender_psid, response)
}

//Displaying the typing (...) message when user might be expected to wait for response from the bot
function typing(sender_psid){
  let request_body = {
    "recipient": {
      "id": sender_psid
    },
    "sender_action":"typing_on"
  }

  // Send the HTTP request to the Messenger Platform
  request({
    "uri": "https://graph.facebook.com/v2.6/me/messages",
    "qs": { "access_token": PAGE_ACCESS_TOKEN },
    "method": "POST",
    "json": request_body
  }, (err, res, body) => {
    if (!err) {
      console.log('message sent!')
    } else {
      console.error("Unable to send message:" + err)
    }
  })
}
